syntax = "proto3";

package authzen.access.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/authzen/access/v1;access";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "OpenID AuthZen Access Service"
    version: "1.0.0-3"
    contact: {
      name: ""
      url: ""
      email: ""
    }
    license: {
      name: "Apache v2"
      url: ""
    }
  }

  external_docs: {
    url: "https://openid.github.io/authzen/"
    description: "Authorization API 1.0 - draft 03"
  }

  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"

  responses: {
    key: "400"
    value: {description: "Bad Request"}
  }
  responses: {
    key: "401"
    value: {description: "Unauthorized"}
  }
  responses: {
    key: "403"
    value: {description: "Forbidden"}
  }
  responses: {
    key: "500"
    value: {description: "Internal error"}
  }
};

service Access {
  // evaluation
  rpc Evaluation(EvaluationRequest) returns (EvaluationResponse) {
    option (google.api.http) = {
      post: "/access/v1/evaluation"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "authzen"
      summary: "Access Evaluation API"
      description: "TBD"
      operation_id: "openid.authzen.access.v1.evaluation.post"
      deprecated: false
    };
  }

  // evaluations
  rpc Evaluations(EvaluationsRequest) returns (EvaluationsResponse) {
    option (google.api.http) = {
      post: "/access/v1/evaluations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "authzen"
      summary: "Access Evaluations API"
      description: "TBD."
      operation_id: "openid.authzen.access.v1.evaluations.post"
      deprecated: false
    };
  }

  // subject search
  rpc SubjectSearch(SubjectSearchRequest) returns (SubjectSearchResponse) {
    option (google.api.http) = {
      post: "/access/v1/search/subject"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "authzen"
      summary: "Subject Search API"
      description: "TBD."
      operation_id: "openid.authzen.access.v1.search.subject.post"
      deprecated: false
    };
  }

  // resource search
  rpc ResourceSearch(ResourceSearchRequest) returns (ResourceSearchResponse) {
    option (google.api.http) = {
      post: "/access/v1/search/resource"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "authzen"
      summary: "Resource Search API"
      description: "TBD."
      operation_id: "openid.authzen.access.v1.search.post"
      deprecated: false
    };
  }

  // action search
  rpc ActionSearch(ActionSearchRequest) returns (ActionSearchResponse) {
    option (google.api.http) = {
      post: "/access/v1/search/action"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "authzen"
      summary: "Action Search API"
      description: "TBD."
      operation_id: "openid.authzen.access.v1.search.action.post"
      deprecated: false
    };
  }
}

// https://openid.github.io/authzen/#name-the-access-evaluation-api-r
message EvaluationRequest {
  Subject subject = 1;
  Action action = 2;
  Resource resource = 3;
  google.protobuf.Struct context = 4;
}

// https://openid.github.io/authzen/#name-the-access-evaluation-api-re
message EvaluationResponse {
  bool decision = 1;
  google.protobuf.Struct context = 2;
}

// https://openid.github.io/authzen/#name-the-access-evaluations-api-
message EvaluationsRequest {
  Subject subject = 1;
  Action action = 2;
  Resource resource = 3;
  google.protobuf.Struct context = 4;
  repeated EvaluationRequest evaluations = 5;
  google.protobuf.Struct options = 6;
}

// https://openid.github.io/authzen/#name-access-evaluations-api-resp
message EvaluationsResponse {
  repeated EvaluationResponse evaluations = 1;
}

// https://openid.github.io/authzen/#name-the-subject-search-api-requ
message SubjectSearchRequest {
  Subject subject = 1;
  Action action = 2;
  Resource resource = 3;
  google.protobuf.Struct context = 4;
  Page page = 5;
}

// https://openid.github.io/authzen/#name-the-subject-search-api-resp
message SubjectSearchResponse {
  repeated Subject results = 1;
  Page page = 2;
}

// https://openid.github.io/authzen/#name-the-resource-search-api-req
message ResourceSearchRequest {
  Subject subject = 1;
  Action action = 2;
  Resource resource = 3;
  google.protobuf.Struct context = 4;
  Page page = 5;
}

// https://openid.github.io/authzen/#name-the-resource-search-api-res
message ResourceSearchResponse {
  repeated Resource results = 1;
  Page page = 2;
}

// https://openid.github.io/authzen/#name-the-action-search-api-reque
message ActionSearchRequest {
  Subject subject = 1;
  Action action = 2;
  Resource resource = 3;
  google.protobuf.Struct context = 4;
  Page page = 5;
}

// https://openid.github.io/authzen/#name-the-action-search-api-respo
message ActionSearchResponse {
  repeated Action results = 1;
  Page page = 2;
}

// https://openid.github.io/authzen/#name-subject
message Subject {
  string type = 1;
  string id = 2;
  google.protobuf.Struct properties = 3;
}

// https://openid.github.io/authzen/#name-action
message Action {
  string name = 1;
  google.protobuf.Struct properties = 2;
}

// https://openid.github.io/authzen/#name-resource
message Resource {
  string type = 1;
  string id = 2;
  google.protobuf.Struct properties = 3;
}

message Page {
  string next_token = 1;
}
